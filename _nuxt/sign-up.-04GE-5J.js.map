{"version":3,"file":"sign-up.-04GE-5J.js","sources":["../../../../../../packages/core/components/v-checkbox.vue","../../../../../../packages/core/api/legal.ts","../../../../pages/auth/sign-up.vue"],"sourcesContent":["<template>\n  <div class=\"flex items-center gap-3\">\n    <div\n      class=\"flex h-5 w-5 shrink-0 cursor-pointer items-center justify-center rounded-sm border bg-gray-50 dark:border-gray-400 dark:bg-gray-600\"\n      @click=\"value = !value\"\n    >\n      <Icon\n        v-if=\"value\"\n        name=\"tabler:check\"\n      />\n    </div>\n    <p>\n      <slot />\n    </p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst value = defineModel<boolean>({ default: false })\n</script>\n","import type { Agreement, CopyrightClaim, LegalEntity, LegalEntityType } from \"core/types/api\"\n\nexport function getAgreements(params: { ids?: number[]; required_for?: \"copyright_claims\" | \"account_creation\" } = {}) {\n  return api.get<Agreement[]>(\"get_agreements\", {\n    params,\n  })\n}\n\nexport function submitCopyrightClaim(data: {\n  url: string\n  name?: string\n  phone?: string\n  email?: string\n  license_text: string\n  \"g-recaptcha-response\"?: string\n}) {\n  return api.post(\"submit_copyright_claim\", {\n    data,\n  })\n}\n\nexport function getCopyrightClaims() {\n  return api.get<CopyrightClaim[]>(\"get_copyright_claims\")\n}\n\nexport function getLegalEntity(params: { id?: number } = {}) {\n  return api.get<LegalEntity>(\"get_legal_entity\", { params, silent: true })\n}\n\nexport function editLegalEntity(data: {\n  id?: number\n  address: string\n  type: LegalEntityType\n  name: string\n  country: string\n  vat_number: string\n  registry_code: string\n  bank_name: string\n  bank_swift: string\n  bank_address: string\n  bank_iban: string\n  representative_name: string\n  representative_number: string\n  representative_email: string\n  representative_position: string\n  signatory_name: string\n  signatory_number: string\n  signatory_email: string\n  signatory_position: string\n}) {\n  return api.post<LegalEntity>(\"edit_legal_entity\", { data })\n}\n","<template>\n  <div class=\"flex flex-col items-center gap-4\">\n    <form class=\"flex w-96 flex-col gap-2\">\n      <v-label label=\"Name\">\n        <v-input v-model=\"form.name\" />\n      </v-label>\n      <v-label label=\"Surname\">\n        <v-input v-model=\"form.surname\" />\n      </v-label>\n      <v-label label=\"Phone (international format)\">\n        <v-input v-model=\"form.phone\" />\n      </v-label>\n      <v-label label=\"Email\">\n        <v-input\n          v-model=\"form.email\"\n          type=\"email\"\n        />\n      </v-label>\n      <v-checkbox\n        v-model=\"areTermsAccepted\"\n        class=\"mt-1\"\n      >\n        I agree with\n        <template\n          v-for=\"(agreement, idx) of agreements\"\n          :key=\"agreement.id\"\n        >\n          <a\n            :href=\"agreement.uri\"\n            target=\"_blank\"\n          >\n            {{ agreement.name }}\n          </a>\n          <template v-if=\"idx !== agreements.length - 1\">, </template>\n        </template>\n      </v-checkbox>\n      <v-button\n        :disabled=\"!areTermsAccepted\"\n        variant=\"primary\"\n        class=\"mt-2\"\n        :loading=\"isSubmitting\"\n        @click=\"submit\"\n      >\n        Register\n      </v-button>\n    </form>\n\n    <p class=\"text-sm\">Already have an account? <NuxtLink to=\"/auth\">Sign In</NuxtLink></p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { Payload } from \"core/types/api\"\n\ndefinePageMeta({\n  requiredRole: \"guest\",\n  layout: \"centered\",\n})\n\nconst authStore = useAuthStore()\nauthStore.email = \"\"\n\nconst form = reactive<Payload<typeof signup>>({\n  app_id: authStore.appID,\n  name: \"\",\n  surname: \"\",\n  phone: \"\",\n  email: \"\",\n  \"g-recaptcha-response\": \"\",\n})\n\nconst areTermsAccepted = ref(false)\nconst agreements = await getAgreements({ required_for: \"account_creation\" })\n\nconst generateRecaptchaToken = useRecaptcha()\n\nconst isSubmitting = ref(false)\nasync function submit() {\n  isSubmitting.value = true\n\n  try {\n    form[\"g-recaptcha-response\"] = await generateRecaptchaToken()\n    await signup(form)\n\n    authStore.email = form.email\n    navigateTo(\"/auth\")\n\n    const { notifySuccess } = useNotification()\n    notifySuccess(\"Check your email for further instructions\")\n  } finally {\n    isSubmitting.value = false\n  }\n}\n</script>\n"],"names":["value","_useModel","__props","getAgreements","params","api","authStore","useAuthStore","form","reactive","areTermsAccepted","ref","agreements","__temp","__restore","_withAsyncContext","generateRecaptchaToken","useRecaptcha","isSubmitting","submit","signup","navigateTo","notifySuccess","useNotification"],"mappings":"wnBAkBM,MAAAA,EAAQC,EAAoBC,EAAA,YAAmB,oVChBrC,SAAAC,EAAcC,EAAqF,GAAI,CAC9G,OAAAC,EAAI,IAAiB,iBAAkB,CAC5C,OAAAD,CAAA,CACD,CACH,wKCqDA,MAAME,EAAYC,IAClBD,EAAU,MAAQ,GAElB,MAAME,EAAOC,EAAiC,CAC5C,OAAQH,EAAU,MAClB,KAAM,GACN,QAAS,GACT,MAAO,GACP,MAAO,GACP,uBAAwB,EAAA,CACzB,EAEKI,EAAmBC,EAAI,EAAK,EAC5BC,GAAmB,CAAAC,EAAAC,CAAA,EAAAC,EAAA,IAAAZ,EAAc,CAAE,aAAc,kBAAoB,CAAA,CAAA,mBAErEa,EAAyBC,IAEzBC,EAAeP,EAAI,EAAK,EAC9B,eAAeQ,GAAS,CACtBD,EAAa,MAAQ,GAEjB,GAAA,CACGV,EAAA,sBAAsB,EAAI,MAAMQ,IACrC,MAAMI,EAAOZ,CAAI,EAEjBF,EAAU,MAAQE,EAAK,MACvBa,EAAW,OAAO,EAEZ,KAAA,CAAE,cAAAC,GAAkBC,IAC1BD,EAAc,2CAA2C,CAAA,QACzD,CACAJ,EAAa,MAAQ,EACvB,CACF"}